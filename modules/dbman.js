// Generated by CoffeeScript 1.10.0

/* global redis, redislistener */

(function() {
  var async, basejson, config, dayjob, fs, moment, parserDay, parserWeek, scheduler, setToday, underscore, update, weekjob;

  moment = require('moment');

  scheduler = require('node-schedule');

  underscore = require('underscore');

  config = require('../config.js');

  fs = require('fs');

  async = require('async');

  console.log('Starting Database Manager...');

  config.connect('dbman');

  basejson = {};

  update = function() {
    console.log('Loading the Database Files');
    basejson = JSON.parse(fs.readFileSync('db/database.json'));
  };

  parserDay = function(update, date, callback) {
    var today, todaySpecials;
    console.log('parsing a day: ' + moment(date).format('YYYY-MM-DD'));
    if (date == null) {
      today = basejson.treeroot[moment().day()];
    }
    if (date != null) {
      today = basejson.treeroot[moment(date != null ? date : void 0).day()];
    }
    todaySpecials = void 0;
    return redis.get('specials', function(err, res) {
      var specialsArray;
      if (err) {
        console.log(err);
      }
      specialsArray = JSON.parse(res);
      todaySpecials = underscore.find(specialsArray, function(item) {
        return moment(date != null ? date : void 0).isSame(moment(item.date, 'YYYY-MM-DD'), 'day');
      });
      if (todaySpecials != null) {
        today = todaySpecials.schedule;
      }
      if (update) {
        setToday(today);
      }
      if (callback) {
        return callback(today);
      }
    });
  };

  parserWeek = function() {
    var week;
    week = [];
    return async.eachSeries([1, 2, 3, 4, 5], function(item, callback) {
      return parserDay(false, moment().day(item), function(today) {
        week[item] = today;
        return callback();
      });
    }, function() {
      return redis.set('week', JSON.stringify(week));
    });
  };

  setToday = function(daySchedule) {
    if (daySchedule != null) {
      redis.set('today', JSON.stringify(daySchedule));
    } else {
      redis.set('today', 'No School');
    }
    return redis.set('schedule', JSON.stringify(basejson.treeroot));
  };

  dayjob = scheduler.scheduleJob('0 0 * * *', function() {
    console.log('Running Daily Update');
    update();
    parserDay(true);
    parserWeek();
  });

  dayjob.invoke();

  weekjob = scheduler.scheduleJob('0 0 0 * *', function() {
    parserWeek();
  });

  redislistener.on('message', function(channel, message) {
    if (message === 'update' && channel === 'dbman') {
      console.log('Got an update request from the Redis Channel');
      dayjob.invoke();
    }
  });

  console.log('Reporting to service set');

  redis.zincrby('services', 1, 'dbman');

  process.on('exit', function(code) {
    console.log('Removing From service list');
    redis.zincrby('services', -1, 'dbman');
    redis.quit();
    redislistener.quit();
  });

  process.on('SIGINT', function(code) {
    process.exit();
  });

}).call(this);

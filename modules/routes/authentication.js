// Generated by CoffeeScript 1.10.0
(function() {
  module.exports = (function() {
    var Ioredis, app, bodyParser, config, express, jsonParser, jwt, redis, underscore;
    express = require('express');
    app = express();
    bodyParser = require('body-parser');
    jwt = require('jsonwebtoken');
    jsonParser = bodyParser.json();
    config = require('../../config.js');
    Ioredis = require('ioredis');
    redis = new Ioredis(config.dbport, config.dbaddr);
    underscore = require('underscore');
    app.use(function(req, res, next) {
      res.header('Access-Control-Allow-Origin', '*');
      res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
      next();
    });
    app.post('/inputschedule', jsonParser, function(req, res) {
      var auth;
      if (!req.body) {
        res.sendStatus(400);
      }
      auth = jwt.verify(req.get('Authorization'), config.secret);
      if (auth.admin === true && auth.ip === req.ip) {
        redis.publish('specials', JSON.stringify(req.body));
        redis.publish('dbman', 'update');
        res.sendStatus(201);
      } else {
        res.sendStatus(401);
      }
    });
    app.post('/deletespecial', jsonParser, function(req, res) {
      if (!req.body) {
        return res.sendStatus(400);
      }
      redis.publish('specials', 'delete: ' + req.body.date);
    });
    app.post('/modifyspecial', jsonParser, function(req, res) {
      var auth;
      if (!req.body) {
        res.sendStatus(400);
      }
      auth = jwt.verify(req.get('Authorization'), config.secret);
      if (auth.admin === true && auth.ip === req.ip) {
        redis.set('specials', JSON.stringify(req.body));
        redis.publish('dbman', 'update');
        res.sendStatus(201);
      } else {
        res.sendStatus(401);
      }
    });
    app.post('/auth', jsonParser, function(req, res) {
      if (!req.body) {
        return res.sendStatus(400);
      }
      return redis.get('auth', function(err, result) {
        if (err) {
          res.send('An error occured: ' + err);
        }
        if (underscore.isEqual(req.body, JSON.parse(result))) {
          return res.send(jwt.sign({
            admin: true,
            ip: req.ip
          }, config.secret));
        } else {
          return res.sendStatus(401);
        }
      });
    });
    return app;
  })();

}).call(this);

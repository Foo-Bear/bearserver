// Generated by CoffeeScript 1.10.0

/* global redis, redislistener */

(function() {
  var config, currentClass, endsin, gettoday, isnext, isnow, minutejob, moment, nextClass, remainingTime, scheduler, today, underscore, upcoming;

  moment = require('moment');

  scheduler = require('node-schedule');

  underscore = require('underscore');

  config = require('../config.js');

  config.connect('dataprocessor');

  today = [];

  currentClass = [];

  nextClass = [];

  remainingTime = [];

  upcoming = [];

  gettoday = function() {
    redis.get('today', function(err, data) {
      if (err) {
        throw err;
      }
      if (data === 'No School') {
        today = 'No School';
      } else {
        today = JSON.parse(data);
      }
    });
  };

  isnow = function() {
    console.log('Finding Current Class');
    if (today !== 'No School') {
      currentClass = underscore.filter(today, function(item) {
        return moment().isBetween(moment(item.stime), moment(item.etime));
      });
      if (currentClass.length >= 1) {
        console.log('Current class is ' + JSON.stringify(currentClass));
        redis.set('currentclass', JSON.stringify(currentClass));
      } else if (upcoming.length >= 1) {
        console.log('School today, but no current class');
        redis.set('currentclass', 'Break');
      } else if (upcoming.length === 0) {
        console.log('No upcoming classes, school is out now.');
        redis.set('currentclass', 'No School');
      }
    } else {
      console.log('No School today');
      redis.set('currentclass', 'No School');
    }
  };

  isnext = function() {
    var a, b;
    console.log('Finding Next Class');
    if (today !== 'No School') {
      upcoming = [];
      nextClass = [];
      upcoming = underscore.filter(today, function(item) {
        return moment().isBefore(moment(item.stime));
      });
      redis.set('upcoming', JSON.stringify(upcoming));
      console.log(upcoming);
      if (upcoming.length >= 1) {
        console.log('upcoming is a pretty long ' + upcoming.length);
        if (parseInt(upcoming[0].key_name.slice(-1), 10) === 0) {
          nextClass = [];
          nextClass = upcoming.slice(0, 1);
        } else if (upcoming[0].key_name.slice(-1) !== 0) {
          nextClass = [];
          a = underscore.find(upcoming, function(item) {
            return parseInt(item.key_name.slice(-1), 10) === 1;
          });
          b = underscore.find(upcoming, function(item) {
            return parseInt(item.key_name.slice(-1), 10) === 2;
          });
          if (a) {
            nextClass.push(a);
          } else {
            nextClass.push(upcoming[2]);
          }
          if (b) {
            nextClass.push(b);
          } else {
            nextClass.push(upcoming[2]);
          }
        }
      } else {
        redis.set('nextclass', 'No School');
      }
      if (nextClass.length >= 1) {
        redis.set('nextclass', JSON.stringify(nextClass));
      } else {
        redis.set('nextclass', 'No School');
      }
    } else {
      redis.set('nextclass', 'No School');
    }
  };

  endsin = function() {
    if (currentClass !== 'No School') {
      underscore.each(currentClass, function(item) {
        item.etime = moment({
          h: item.ehour,
          m: item.emin
        });
        item.remainingtime = Math.floor(moment.duration(item.etime.diff(moment())).asMinutes());
      });
      remainingTime = underscore.pluck(currentClass, 'remainingtime');
      redis.set('remainingtime', JSON.stringify(remainingTime));
    } else {
      redis.set('remainingtime', 'No School');
    }
  };

  minutejob = scheduler.scheduleJob('0 * * * * *', function() {
    gettoday();
    isnow();
    isnext();
    endsin();
  });

  minutejob.invoke();

  redislistener.on('message', function(channel, message) {
    if (message === 'update') {
      minutejob.invoke();
    }
  });

  console.log('Reporting to service set');

  redis.zincrby('services', 1, 'dataprocessor');

  process.on('exit', function(code) {
    console.log('Removing from service list');
    redis.zincrby('services', -1, 'dataprocessor');
    redis.quit();
    redislistener.quit();
  });

  process.on('SIGINT', function(code) {
    process.exit();
  });

}).call(this);
